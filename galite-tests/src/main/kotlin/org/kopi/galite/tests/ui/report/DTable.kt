/*
 * Copyright (c) 2013-2020 kopiLeft Services SARL, Tunis TN
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

package org.kopi.galite.tests.ui.report
import java.io.Serializable
import java.lang.Integer.max
import java.lang.reflect.Method

import org.kopi.galite.report.UReport.UTable
import org.kopi.galite.ui.report.VTable

import com.vaadin.flow.component.*
import com.vaadin.flow.component.grid.Grid
import com.vaadin.flow.component.grid.ItemClickEvent
import com.vaadin.flow.data.provider.ListDataProvider
import com.vaadin.flow.data.renderer.ClickableRenderer
import com.vaadin.flow.router.Route
import org.kopi.galite.report.*


@Route("DTable")
@Tag(Tag.SPAN)
class DTable(model: VTable) : UReport.UTable, ClickableRenderer.ItemClickListener<Any>, Grid<VTable>() {

  var grid: Grid<VReportRow> = Grid()
  private lateinit var model: VTable

  /**
   * Creates a new `DTable` instance.
   * @param model The table model.
   */
  init {
    grid.addColumn("").setHeader(Html("<b>Name</b>"))
    grid.setItems(model.columns as ListDataProvider<VReportRow>)
    this.model = model
    // not really necessary.
    //alwaysRecalculateColumnWidths = true;
    grid.addClassName("small"); // "small"
    grid.addClassName("borderless")
    grid.addClassName("report")
    grid.width = "100%"
    grid.addItemClickListener(this as ComponentEventListener<ItemClickEvent<VReportRow>>)
    //grid.setItemDetailsRenderer()
  }

  //--------------------------------------------------
  //  IMPLEMENTATIONS
  //--------------------------------------------------

  override fun convertColumnIndexToModel(viewColumnIndex: Int): Int {
    TODO()
  }

  override fun convertColumnIndexToView(modelColumnIndex: Int): Int {
    TODO()
  }

  fun getColumnHeader(propertyId: Any): String? {
    return model.getColumnName((propertyId as Int))
  }

  fun changeVariables(source: Any?, variables: Map<String?, Any?>) {
    TODO()
  }

  /**
   * Sets the table visible columns.
   * @param visibleColumns The table visible columns.
   */
  fun setVisibleColumns(visibleColumns: IntArray) {
    TODO()
  }

  /**
   * Notifies the table model that table structure has been changed.
   */
  fun fireStructureChanged() {
    model.fireStructureChanged()
  }

  /**
   * Returns the table column count.
   * @return The table column count.
   */
  fun getColumnCount(): Int {
    return model.getColumnCount()
  }

  /**
   * Returns the table row count.
   * @return The table row count.
   */
  fun getRowCount(): Int {
    return model.columns.size
  }

  /**
   * Returns the table model.
   * @return The table model.
   */
  fun getModel(): VTable? {
    return model
  }

  /**
   * Registers a [ColumnCollapseListener] to this table.
   * @param listener The listener to be registered.
   */
  fun addListener(listener: ColumnCollapseListener?) {
    TODO()
  }

  /**
   * Returns the selected row.
   * @return The selected row.
   */
  fun getSelectedRow(): Int {
    return selectedRow
  }

  /**
   * Returns the selected column.
   * @return The selected column.
   */
  fun getSelectedColumn(): Int {
    return selectedColumn
  }

  /**
   * Sets the selected column.
   * @param selectedColumn The selected column.
   */
  fun setSelectedColumn(selectedColumn: Int) {
    this.selectedColumn = selectedColumn
  }

  fun onItemClicked(event: ItemClickEvent<Any>) {
    selectedRow = event.item as Int
    selectedColumn = event.column.id as Int
  }

  override fun onItemClicked(item: Any?) {
    TODO()
  }

  /**
   * Reset all columns widths.
   */
  fun resetWidth() {
    for (i in 0 until model.getColumnCount())
      resetColumnSize(i)
  }

  /**
   * Resets the column size at a given position.
   * @param pos The column position.
   */
  private fun resetColumnSize(pos: Int) {
    val column: VReportColumn? = model.model.getAccessibleColumn(convertColumnIndexToModel(pos))
    var width: Int
    if (column!!.folded && column !is VReportColumn) {
      width = 1
    } else if (column is VFixnumColumn || column is VIntegerColumn) {
      width = max(column.label.length, column.width)
      // Integer and Fixed column can contain , data generated by operations like sum, multiplication
      // --> compute column width occording to data.
      width = max(width, model.model.computeColumnWidth(convertColumnIndexToModel(pos)))
    } else {
      width = max(column.label.length, column.width)
    }
    if (width != 0) {
      width = width * 9 + 2
    }
    //setColumnWidth(pos, width)
  }


  /**
   * Sets the table selected row.
   * @param row The selected row.
   */
  fun setSelectedRow(row: Int) {
    selectedRow = row
  }

  /**
   * Resets the table cached information.
   */
  fun resetCachedInfos() {
    selectedRow = -1
    selectedColumn = -1
    select(null)
  }

  //---------------------------------------------------
  // COLUMN COLLAPSE LISTENER
  //---------------------------------------------------

  /**
   * The `ColumnCollapseListener` notifies registered
   * objects that a column collapse event happened.
   */
  interface ColumnCollapseListener : Serializable {
    /**
     * Fired when a column collapse event happens.
     * @param event The columns collapse event.
     */
    fun columnCollapsed(event: ColumnCollapseEvent?)
  }


  //----------------------------------------------
  // COLUMN COLLAPSE EVENT
  //----------------------------------------------

  /**
   * The `ColumnCollapseEvent` is a [Component.Event]
   * that handle column collapse events.
   * Creates a new `ColumnCollapseEvent` instance
   * @param source The source component.
   * @param propertyIds The collapsed columns IDs.
   */
  class ColumnCollapseEvent(source: Component?, val propertyIds: Array<Any>, fromClient: Boolean)
    : ComponentEvent<Component>(source, fromClient) {

    companion object {
      var METHOD: Method? = null

      init {
        METHOD = try {
          ColumnCollapseListener::class.java.getDeclaredMethod("columnCollapsed", *arrayOf<Class<*>>(ColumnCollapseEvent::class.java))
        } catch (e: NoSuchMethodException) {
          // This should never happen
          throw RuntimeException(e)
        }
      }
    }
  }

  /**
   * The `DescriptionGenerator` is the report implementation
   * of the [ItemDescriptionGenerator]
   */
  class DescriptionGenerator {
  }

  //-------------------------------------------
  // DATA MEMBERS
  //-------------------------------------------

  private lateinit var propertyIds: Array<Any>
  lateinit var METHOD: Method
  private var selectedRow = -1
  private var selectedColumn = -1
  var HasElement.tooltipsText: String
    get() = element.getProperty("title")
    set(value) {
      element.setProperty("title", value)
    }
}
